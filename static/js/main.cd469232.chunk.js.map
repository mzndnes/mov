{"version":3,"sources":["components/search.js","components/result.js","components/results.js","components/popup.js","App.js","serviceWorker.js","index.js"],"names":["Search","hndinput","search","className","type","placeholder","onChange","onKeyPress","Result","result","openPopup","onClick","imdbID","src","Poster","Title","Results","results","map","key","Popup","selected","closePopup","Year","imdbRating","alt","Plot","App","useState","s","res","sel","stt","setStt","e","target","value","prevState","console","log","axios","apiurl","then","data","id","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"4OAiBeA,MAff,YAAsC,IAAnBC,EAAkB,EAAlBA,SAASC,EAAS,EAATA,OACxB,OACI,6BAASC,UAAU,kBACf,2BACRC,KAAK,OACLC,YAAY,wBACZF,UAAU,YACVG,SAAUL,EACVM,WAAYL,MCGDM,MAXf,YAAwC,IAAtBC,EAAqB,EAArBA,OAAQC,EAAa,EAAbA,UAEzB,OAEC,yBAAKP,UAAU,SAASQ,QAAS,kBAAMD,EAAUD,EAAOG,UACvD,yBAAKC,IAAKJ,EAAOK,SACjB,4BAAKL,EAAOM,SCMAC,MAVf,YAA2C,IAAvBC,EAAsB,EAAtBA,QAASP,EAAa,EAAbA,UAC5B,OACC,6BAASP,UAAU,WACjBc,EAAQC,KAAI,SAAAT,GAAM,OAClB,kBAAC,EAAD,CAAQU,IAAKV,EAAOG,OAAQH,OAAQA,EAAQC,UAAWA,SCW5CU,MAjBf,YAA0C,IAAzBC,EAAwB,EAAxBA,SAAUC,EAAc,EAAdA,WAE1B,OACC,6BAASnB,UAAU,SAClB,yBAAKA,UAAU,WACd,4BAAMkB,EAASN,MAAf,IAAuB,kCAASM,EAASE,KAAlB,MACvB,uBAAGpB,UAAU,UAAb,WAA+BkB,EAASG,YACxC,yBAAKrB,UAAU,QACd,yBAAKU,IAAKQ,EAASP,OAAQW,IAAI,iBAC/B,2BAAIJ,EAASK,OAEd,4BAAQvB,UAAU,QAAQQ,QAASW,GAAnC,YC2DWK,MAhEf,WAAgB,IAAD,EACMC,mBAAS,CAACC,EAAE,GAAGC,IAAI,GAAGC,IAAI,KADhC,mBACNC,EADM,KACFC,EADE,KA8Cb,OACE,yBAAK9B,UAAU,OACb,4BAAQA,UAAU,cAChB,+CAEF,8BACE,kBAAC,EAAD,CAAQF,SAlCM,SAACiC,GACnB,IAAIL,EAAIK,EAAEC,OAAOC,MAEjBH,GAAO,SAAAI,GACL,OAAO,2BAAKA,GAAZ,IAAuBR,EAAGA,OAE5BS,QAAQC,IAAIP,EAAIH,IA4BmB3B,OA/CtB,SAACgC,GACA,UAAVA,EAAEf,KACJqB,IAAMC,yDAAiBT,EAAIH,GAAGa,MAAK,YAAa,IAE1CzB,EAFyC,EAAV0B,KAEhB3C,OAEnBiC,GAAO,SAAAI,GACL,OAAO,2BAAKA,GAAZ,IAAuBP,IAAKb,aAyC9B,kBAAC,EAAD,CAASA,QAASe,EAAIF,IAAKpB,UA1Bf,SAAAkC,GAEd,IAAInC,EAAOuB,EAAIF,IAAIe,QAAO,SAAAhB,GAAC,OAAEA,EAAEjB,QAAQgC,KAKvCX,GAAO,SAAAI,GACL,OAAO,2BAAKA,GAAZ,IAAuBN,IAAKtB,EAAO,WAoBT,oBAAjBuB,EAAID,IAAIhB,OACjB,kBAAC,EAAD,CAAOM,SAAUW,EAAID,IAAKT,WAhBb,WACjBW,GAAO,SAAAI,GACL,OAAO,2BAAKA,GAAZ,IAAuBN,IAAK,cCtCde,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhB,MAAK,SAAAiB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxB,QAAQwB,MAAMA,EAAMC,c","file":"static/js/main.cd469232.chunk.js","sourcesContent":["import React from 'react'\n\nfunction Search ({ hndinput,search}) {\n    return (\n        <section className='searchbox-wrap'>\n            <input \n\t\t\t\ttype=\"text\" \n\t\t\t\tplaceholder=\"Search for a movie...\" \n\t\t\t\tclassName=\"searchbox\" \n\t\t\t\tonChange={hndinput}\n\t\t\t\tonKeyPress={search}\n\t\t\t/>\n\n        </section>\n    )\n}\n\nexport default Search\n\n","import React from 'react'\n\nfunction Result({ result, openPopup }) {\n    // console.log(result)\n\treturn (\n        \n\t\t<div className=\"result\" onClick={() => openPopup(result.imdbID)}>\n\t\t\t<img src={result.Poster} />\n\t\t\t<h3>{result.Title}</h3>\n\t\t</div>\n\t)\n}\n\nexport default Result","import React from 'react'\n\nimport Result from './result'\n\nfunction Results ({ results, openPopup }) {\n\treturn (\n\t\t<section className=\"results\">\n\t\t\t{results.map(result => (\n\t\t\t\t<Result key={result.imdbID} result={result} openPopup={openPopup} />\n\t\t\t))}\n\t\t</section>\n\t)\n}\n\nexport default Results","import React from 'react'\n\nfunction Popup({ selected, closePopup }) {\n    // console.log(selected.Title)\n\treturn (\n\t\t<section className=\"popup\">\n\t\t\t<div className=\"content\">\n\t\t\t\t<h2>{ selected.Title } <span>({ selected.Year })</span></h2>\n\t\t\t\t<p className=\"rating\">Rating: {selected.imdbRating}</p>\n\t\t\t\t<div className=\"plot\">\n\t\t\t\t\t<img src={selected.Poster} alt=\"another imag\" />\n\t\t\t\t\t<p>{selected.Plot}</p>\n\t\t\t\t</div>\n\t\t\t\t<button className=\"close\" onClick={closePopup}>Close</button>\n\t\t\t</div>\n\t\t</section>\n\t)\n}\n\nexport default Popup","import React, { useState } from 'react'\nimport axios from 'axios'\n\n\nimport Search from './components/search';\nimport Results from './components/results';\nimport Popup from './components/popup';\n\nfunction App() {\n  const [stt,setStt]=useState({s:'',res:[],sel:{}})\n  const apiurl='http://www.omdbapi.com/?i=tt3896198&apikey=47b2608f'\n  \n\n  const search = (e) => {\n    if (e.key === \"Enter\") {\n      axios(apiurl + \"&s=\" + stt.s).then(({data}) => {\n        \n        let results = data.Search;\n\n        setStt(prevState => {\n          return { ...prevState, res: results }\n        })\n      });\n      // console.log(stt)\n    }}\n\n  const handleInput = (e) => {\n    let s = e.target.value;\n\n    setStt(prevState => {\n      return { ...prevState, s: s }\n    });\n    console.log(stt.s)\n  }\n  \n  const openPopup = id => {\n    \n      let result=stt.res.filter(s=>s.imdbID==id)\n      \n      // console.log(result);\n      // console.log(result[0].Title);\n\n      setStt(prevState => {\n        return { ...prevState, sel: result[0] }\n      });\n    \n  }\n\n  const closePopup = () => {\n    setStt(prevState => {\n      return { ...prevState, sel: {} }\n    });\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Movie Database</h1>\n      </header>\n      <main>\n        <Search hndinput={handleInput} search={search}/>\n        <Results results={stt.res} openPopup={openPopup} />\n        \n        {(typeof stt.sel.Title != \"undefined\") ? \n        <Popup selected={stt.sel} closePopup={closePopup} /> : \n        false}\n      </main>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}